import{_ as o,o as p,c as i,a as s}from"./app-c399b13a.js";const c={},t=s('<p>单点登录英文全称Single Sign On，简称就是SSO。它的解释是：<strong>在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统</strong></p><p>4个系统，分别是Application1、Application2、Application3、和SSO。Application1、Application2、Application3没有登录模块，而SSO只有登录模块，没有其他的业务模块</p><p>当Application1、Application2、Application3需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了。</p><h3 id="_1-同域下的单点登录" tabindex="-1"><a class="header-anchor" href="#_1-同域下的单点登录" aria-hidden="true">#</a> 1. 同域下的单点登录</h3><p>一个企业一般情况下只有一个域名，通过二级域名区分不同的系统。比如我们有个域名叫做：mittacy.com，同时有两个业务系统分别为：app1.mittacy.com 和 app2.mittacy.com。</p><p>我们要做单点登录（SSO）叫做：sso.mittacy.com，只要在 sso.mittacy.com 中登录，app1.mittacy.com 和 app2.mittacy.com 也就登录了</p><p>在 sso.mittacy.com 中登录，其实是在 sso.mittacy.com 的服务端 session 中记录了登录状态，同时在浏览器端的 sso.mittacy.com 下写入 cookie，登录成功后，如果想让 app1.mittacy.com 和 app2.mittacy.com 随之登录，需要解决两个问题：</p><ul><li><p>cookie 是不能跨域的，cookie 的 domain 属性是 sso.mittacy.com，在给 app1.mittacy.com 和 app2.mittacy.com 发送请求时是带不上的</p><blockquote><p><em>解决方案：登录 sso 系统后，将 cookie 设置为顶域(设置host)，即mittacy.com</em></p></blockquote></li><li><p>sso、app1 和 app2 是不同的应用，它们的 session 存在自己的应用内，是不共享的</p><blockquote><p><em>解决方案：共享 session 的方案，例如 Spring-Session、redis</em></p></blockquote></li></ul><p>同域下的单点登录就实现了，<strong>但这还不是真正的单点登录。</strong></p><h3 id="_2-不同域下的单点登录" tabindex="-1"><a class="header-anchor" href="#_2-不同域下的单点登录" aria-hidden="true">#</a> 2. 不同域下的单点登录</h3><p>同域下的单点登录巧用了 Cookie 顶域的特性，但是是不同域之间 cookie 是不共享的，怎么办？</p><p>这时候需要看看 <strong>CAS</strong> 流程，该流程是单点登录的标志流程</p><p><img src="http://static.mittacy.com/blog/202109171839579.png" alt="sso-app1-login"></p><ol><li>用户访问 <code>app1.mittacy.com</code>，aap1系统是需要登录的，但用户没有登录</li><li>跳转到 <code>CAS Server</code>，即 sso 登录系统。sso系统也没有登录，弹出登录页</li><li>填入用户、密码后，`sso系统进行认证，认证成功后<u>将登录状态写入 sso 的 session，浏览器中写入 sso 域下的 cookie</u></li><li><code>sso 系统</code>登录完成后会生成一个 <code>ST(Service Ticket)</code>，然后<u>跳转到 app1系统，同时将 ST 作为参数传递给app1系统</u></li><li><code>app1系统</code> 拿到 ST 后，<u>从后台向 sso 系统发送请求验证 ST 是否有效</u></li><li>验证通过后，<code>app1服务端</code><u>将登录状态写入 session 并设置 app1 域下的 cookie</u></li></ol><p>至此，单点登录就完成了。此时</p><ul><li>浏览器中的 cookie有：sso域下的cookie、app1域下的cookie</li><li>服务端session有：sso服务端的session、app1服务端的session</li></ul><p>以后再访问 app1 系统时，由于app1的cookie和session都有了，所以app1是可以直接登录成功的</p><p>接下来我们访问 app2 系统的流程</p><p><img src="http://static.mittacy.com/blog/202109171839031.png" alt="sso-app2-login"></p><ol><li>用户访问 app2.mittacy.com，app2系统是需要登录的，但用户没有登录</li><li>跳转到 sso 登录系统，sso系统已经登录了</li><li>sso 生成 ST， 跳转到 app2 系统， ST 作为参数传递给 app2系统</li><li>app2 拿到 ST，后台访问 sso 验证 ST 有效性</li><li>验证成功后，app2服务端 将登录状态写入 session并设置 app2域下的 cookie</li></ol><hr><p>参考链接</p><p>https://developer.aliyun.com/article/636281</p>',23),a=[t];function e(l,n){return p(),i("div",null,a)}const r=o(c,[["render",e],["__file","index.html.vue"]]);export{r as default};
