import{_ as e,o as s,c as a,a as n}from"./app-a6a5d4a7.js";const i={},c=n(`<h3 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h3><p>XSS全称 Cross Site Scripting，跨站脚本漏洞，通过执行恶意脚本，以实现窃取用户登录态、劫持会话等目的的攻击方式。恶意脚本的输入源有：Cookie、Post表的、Get请求、HTTP头内容等，通常将一段 XSS 攻击的代码称为<strong>XSS向量</strong>。主要原因是没有针对用户输入的数据进行检查、过滤。</p><h3 id="_2-xss类型" tabindex="-1"><a class="header-anchor" href="#_2-xss类型" aria-hidden="true">#</a> 2. XSS类型</h3><ul><li><strong>放射性XSS</strong>：直接将 XSS 向量拼接在 URL 中，诱导用户点击，链接中所携带的参数会回显于页面中或者作为页面的处理数据源，最终造成XSS攻击</li><li><strong>存储型XSS</strong>：通过表单，将 XSS 向量提交到数据库。当页面展示数据时，执行 XSS 向量</li><li>**DOM Based XSS：**通过修改浏览页面的 DOM ，绕过防御规则，执行恶意脚本，达到攻击目的</li></ul><h3 id="_3-xss防范手段" tabindex="-1"><a class="header-anchor" href="#_3-xss防范手段" aria-hidden="true">#</a> 3. XSS防范手段</h3><ul><li><p>前、后端穷举有限标签和属性，进行白名单过滤</p><ul><li>说明：前端要求用户仅能输入指定、有限的标签和属性。前端可以通过富文本编辑器配置仅显示指定标签，提升用户体验。后端不能信任前端数据，需要基于白名单再次过滤，保证入库的数据都是可信任的</li><li>适用场景：简单富文本输入</li></ul></li><li><p>后端转移存储，前端展示时，进行黑名单过滤</p><ul><li>说明：实际上普通用户不会输入 XSS 向量，而攻击者可以很轻松地直接发起API请求，所以前端不进行数据检查，后端完全不信任数据输入，直接将用户输入的数据转义入库，然后反转义输出，保证数据库中的内容是可信任的。展示数据时，前端对展示的内容进行基于黑名单的过滤</li><li>使用场景：对输入标签范围不定，富文本编辑功能复杂</li></ul></li></ul><h3 id="_4-cookie-httponly" tabindex="-1"><a class="header-anchor" href="#_4-cookie-httponly" aria-hidden="true">#</a> 4. Cookie HttpOnly</h3><p>大部分攻击者会想要获取到用户的cookie，所以我们需要在 http 的响应头 set-cookie 时设置 httponly，让浏览器知道不能通过document.cookie的方式获取到cookie内容</p><h3 id="_5-设置csp" tabindex="-1"><a class="header-anchor" href="#_5-设置csp" aria-hidden="true">#</a> 5. 设置CSP</h3><p>CSP (Content Security Policy) 是用来防御 XSS 的安全策略</p><p>CSP 通过白名单控制，仅允许加载指定的资源，包括 JavaScript、CSS、HTML、image、、video、Frames等</p><h4 id="设置csp的方式" tabindex="-1"><a class="header-anchor" href="#设置csp的方式" aria-hidden="true">#</a> 设置CSP的方式</h4><ul><li>设置 HTTP 头信息的 <code>Content-Security-Policy</code> 字段</li><li>在网页添加 <code>&lt;meta&gt;</code> 标签</li></ul><h4 id="指令及说明" tabindex="-1"><a class="header-anchor" href="#指令及说明" aria-hidden="true">#</a> 指令及说明</h4><ul><li><code>default-src</code>：定义资源默认加载策略</li><li><code>connect-src</code>：定义 Ajax、WebSocket 等加载策略</li><li><code>font-src</code>：定义 Font 加载策略</li><li><code>frame-src</code>：定义 Frame 加载策略</li><li><code>img-src</code>：定义图片加载策略</li><li><code>media-src</code>：定义 audio、video等引用资源加载策略</li><li><code>object-src</code>：定义 applet、embed、object 等引用资源加载策略</li><li><code>script-src</code>： 定义 JS 加载策略</li><li><code>style-src</code>：定义CSS 加载策略</li></ul><h4 id="配置csp" tabindex="-1"><a class="header-anchor" href="#配置csp" aria-hidden="true">#</a> 配置CSP</h4><ul><li><p>只允许同源资源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Content-Security-Policy: default-src <span class="token string">&#39;self&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>允许同源以及指定地址的 JS 资源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Content-Security-Policy: script-src <span class="token string">&#39;self&#39;</span> www.google-analytics.com ajax.googleapis.com<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>多个资源时，后面的会覆盖前面的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Content-Security-Policy: default-src <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span> script-src <span class="token string">&#39;self&#39;</span><span class="token punctuation">;</span> connect-src <span class="token string">&#39;self&#39;</span><span class="token punctuation">;</span> img-src <span class="token string">&#39;self&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用 meta</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">&quot;Content-Security-Policy&quot;</span> <span class="token assign-left variable">content</span><span class="token operator">=</span>
    <span class="token string">&quot;script-src &#39;self&#39; *.qq.com *.cdn-go.cn; 
    img-src &#39;self&#39; *.cdn-go.cn *.gtimg.cn data:;
    style-src &#39;unsafe-inline&#39; *.cdn-go.cn; 
    media-src &#39;none&#39;; 
    child-src *.qq.com&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p><a href="https://segmentfault.com/a/1190000022678120" target="_blank" rel="noopener noreferrer">前端安全之防范XSS实战小结</a></p><p><a href="https://www.chenshaowen.com/blog/how-to-prevent-xss-in-web-rich-text.html" target="_blank" rel="noopener noreferrer">如何预防 Web 富文本中的 XSS 攻击</a></p>`,20),t=[c];function l(o,r){return s(),a("div",null,t)}const p=e(i,[["render",l],["__file","index.html.vue"]]);export{p as default};
