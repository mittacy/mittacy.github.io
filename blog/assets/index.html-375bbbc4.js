import{_ as s,o as a,c as n,a as e}from"./app-c399b13a.js";const l={},i=e(`<p>安装docker: <a href="https://blog.mittacy.com/article/47" target="_blank" rel="noopener noreferrer">Ubuntu安装docker</a></p><h3 id="_1-安装mysql" tabindex="-1"><a class="header-anchor" href="#_1-安装mysql" aria-hidden="true">#</a> 1. 安装mysql</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载mysql镜像</span>
$ <span class="token function">docker</span> pull mysql
<span class="token comment"># 查看下载情况</span>
$ <span class="token function">docker</span> images
<span class="token comment"># 运行mysql容器</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>password mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>--name</code> 容器的名字</li><li><code>-d</code>：后台运行容器</li><li><code>-e</code>：设置参数</li><li><code>-p 3306:3306</code> 映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务</li><li><code>MYSQL_ROOT_PASSWORD</code> mysql服务root用户的密码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看 mysql 运行情况</span>
$ <span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment"># 使用宿主登录mysql</span>
$ mysql <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
<span class="token comment"># 进入容器</span>
$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>挂载数据</strong></p><p>如果没有其他操作，这样的mysql数据库，每次终止运行后将丢失数据，非常糟糕，需要用到挂载数据：将宿主的一个位置挂载到容器内，对数据卷的修改会立马生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除原来的容器</span>
<span class="token comment"># 创建宿主目录</span>
$ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/data/mysql/conf
$ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/data/mysql/data
<span class="token comment"># 创建my.cnf配置文件</span>
$ <span class="token builtin class-name">cd</span> ~/data/mysql/conf
$ <span class="token function">sudo</span> <span class="token function">vim</span> my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>my.cnf</code>内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">user</span><span class="token operator">=</span>mysql
character-set-server<span class="token operator">=</span>utf8
<span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8
<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新新建容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>mysql <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> ~/data/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> ~/data/mysql/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>password mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><p><code>-v ~/data/docker-mysql/conf/my.cnf:/etc/mysql/my.cnf</code></p><p>将本地<code>~/data/docker-mysql/conf/my.cnf</code>挂载到容器<code>/etc/mysql/my.cnf</code>，也就是访问<code>/etc/mysql/my.cnf</code>的时候其实访问的是<code>~/data/docker-mysql/conf/my.cnf</code></p></li><li><p><code>-v ~/data/docker-mysql/data:/var/lib/mysql</code> 同上一样的意思</p></li></ul><p>注意：如果出现mysql无法启动mysql或者启动闪退的情况，可以看看是不是没开启swap</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">free</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果发现swap虚拟内存都是0，应该就是swap未启用，启用swap：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span>
$ <span class="token function">mkswap</span> /swapfile
$ <span class="token function">swapon</span> /swapfile
$ <span class="token function">free</span>
$ <span class="token function">docker</span> start mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-安装redis" tabindex="-1"><a class="header-anchor" href="#_2-安装redis" aria-hidden="true">#</a> 2. 安装redis</h3><p>创建redis宿主目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/data/redis/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建cnf文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> ~/data/redis/conf
$ <span class="token function">touch</span> redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> pull redis
$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-v</span> ~/data/redis/conf:/usr/local/etc/redis redis redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;mypassword&quot;</span>
$ redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>--appendonly</code>：启用数据持久化保存</li><li><code>redis-server --appendonly yes</code>：在容器执行redis-server启动命令，并且启动redis持久化配置</li><li><code>/data/redis/conf</code> 需要有配置文件conf</li><li><code>--requirepass</code> 密码</li></ul><p>查看执行情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),c=[i];function d(r,p){return a(),n("div",null,c)}const t=s(l,[["render",d],["__file","index.html.vue"]]);export{t as default};
