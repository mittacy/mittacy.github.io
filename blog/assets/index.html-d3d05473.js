import{_ as n,o as s,c as a,a as t}from"./app-a6a5d4a7.js";const p={},e=t(`<h2 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> JWT</h2><p>互联网服务离不开用户认证</p><h3 id="_1-session认证" tabindex="-1"><a class="header-anchor" href="#_1-session认证" aria-hidden="true">#</a> 1. session认证</h3><ol><li>用户发送用户名和密码向服务器发送登录请求</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间、过期时间等等</li><li>服务器生成session_id作为key，val为用户id等身份数据，然后向用户返回一个 session_id，写入用户的 cookie</li><li>用户随后的每次请求，都会通过 cookie，将 session_id 传回服务器</li><li>服务器收到 session_id，使用session_id查询用户身份数据，由此得知用户的身份</li></ol><p>这种方式的好处是session可控制，缺点是扩展性差、占用内存/存储空间，跨域等问题</p><h3 id="_2-jwt的原理" tabindex="-1"><a class="header-anchor" href="#_2-jwt的原理" aria-hidden="true">#</a> 2. JWT的原理</h3><p>服务器不保存 session 数据，所有数据都保存在客户端，每次请求发回服务器，这就是jwt的原理，但是直接发送是不安全的，所以进行了加密，这就是JWT。</p><p>JWT全称 JSON Web Token，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;姓名&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;角色&quot;</span><span class="token operator">:</span> <span class="token string">&quot;管理员&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;到期时间&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022年7月8日0点0分&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户之后的每次请求通信，都要带上这个JSON对象，服务器只靠这个对象认定用户身份，为了防止用户篡改数据，服务器在生成这个对象的时候会进行加密和签名</p><h3 id="_3-jwt的数据结构" tabindex="-1"><a class="header-anchor" href="#_3-jwt的数据结构" aria-hidden="true">#</a> 3. JWT的数据结构</h3><p>实际的JWT大概长这样：<code>Header.Payload.Signature</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Header 头部：</li><li>Payload 负载：</li><li>Signature 签名：</li></ul><h4 id="_3-1-header-头部" tabindex="-1"><a class="header-anchor" href="#_3-1-header-头部" aria-hidden="true">#</a> 3.1 Header 头部</h4><p>Header 部分是一个 JSON对象，描述 JWT 的元数据，通常是下面的样子：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>alg</code> 属性表示签名的算法，默认是 HMAC SHA256；</li><li><code>typ</code> 表示令牌的类型，JWT令牌统一写为 JWT</li></ul><h4 id="_3-2-payload-负载" tabindex="-1"><a class="header-anchor" href="#_3-2-payload-负载" aria-hidden="true">#</a> 3.2 Payload 负载</h4><p>Payload 也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段供选用</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>我们的用户信息也在这个部分进行定义：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span>
  	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mittacy Chen&quot;</span><span class="token punctuation">,</span>
  	<span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><h4 id="_3-3-signature-签名" tabindex="-1"><a class="header-anchor" href="#_3-3-signature-签名" aria-hidden="true">#</a> 3.3 Signature 签名</h4><p>signature 部分是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个 <strong>密钥 secret</strong>，这个密钥只有服务器才只知道，不能泄露给用户。</p><p>然后使用 Header 里面指定的签名算法（默认是 HMAC SHA256）产生签名：</p><p><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></p><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，就可以返回给用户</p><h4 id="_3-4-base64url" tabindex="-1"><a class="header-anchor" href="#_3-4-base64url" aria-hidden="true">#</a> 3.4 Base64URL</h4><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL，这个算法跟 Base64 算法的差异为：base64有三个字符 <code>+</code>、<code>/</code>、<code>=</code> 在URL里面有特殊含义，所以要被替换掉：<code>=被省略</code>、<code>+被替换成-</code>、<code>/被替换成_</code></p><h3 id="_4-jwt-的使用方式" tabindex="-1"><a class="header-anchor" href="#_4-jwt-的使用方式" aria-hidden="true">#</a> 4. JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT后，客户端每次与服务器通信，都要带上这个 JWT。</p><ul><li>可以存储在Cookie里面，这种方式不支持跨域</li><li>存储在localStorage，发送时放在 HTTP 请求的头信息 <code>Authorization</code> 字段</li></ul><h3 id="_5-jwt的几个特点" tabindex="-1"><a class="header-anchor" href="#_5-jwt的几个特点" aria-hidden="true">#</a> 5. JWT的几个特点</h3><ul><li><p>JWT不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数</p></li><li><p>JWT的最大缺点是，由于服务器不保存session状态，因此无法再使用过程中废止某个token，或者更改token的权限，一旦JWT签发了，在到期之前就会始终有效。可以使用redis记录黑名单token，有效期就截止该token的有效期，在解析token前先查询黑名单是否存在，存在则无效，这种做法可以解决退出后让token失效，但是有一种情况是没法解决的：</p><blockquote><p>一个用户在手机A中登录了，然后又在手机B中登录，在过期之前手机A和B都可以登录，无法做到B登录后让A过期，如果要做到这点，就必须让服务器维护一个清单（记录该账号是否已经签发token），这样又回到session的老路了</p></blockquote></li><li><p>JWT本身包含了认证信息，一旦泄露，任何人都可以使用该令牌的所有权限，为了减少盗用，JWT的有效期应该设置得短一些，可以采用续签的方式，在校验token快过期时重新签发；同时 JWT 应该使用 HTTPS 协议传输</p></li></ul><h2 id="go实现用户身份校验" tabindex="-1"><a class="header-anchor" href="#go实现用户身份校验" aria-hidden="true">#</a> Go实现用户身份校验</h2><h3 id="_1-登录" tabindex="-1"><a class="header-anchor" href="#_1-登录" aria-hidden="true">#</a> 1. 登录</h3><p>JWT服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 生成管理员登录token</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctl <span class="token operator">*</span>jwtService<span class="token punctuation">)</span> <span class="token function">GenerateAdminToken</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> role model<span class="token punctuation">.</span>UserRole<span class="token punctuation">,</span> expire time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	expireAt <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span>
	token <span class="token operator">:=</span> model<span class="token punctuation">.</span>Token<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       id<span class="token punctuation">,</span>
		UserName<span class="token punctuation">:</span> name<span class="token punctuation">,</span>
		Role<span class="token punctuation">:</span>     role<span class="token punctuation">,</span>
		RegisteredClaims<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>
			ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>expireAt<span class="token punctuation">)</span><span class="token punctuation">,</span>
			Issuer<span class="token punctuation">:</span>    viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN_ISSUER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	t <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> token<span class="token punctuation">)</span>
	secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN_SECRET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	tokenStr<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">WithStack</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> tokenStr<span class="token punctuation">,</span> expireAt<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解析token信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctl <span class="token operator">*</span>jwtService<span class="token punctuation">)</span> <span class="token function">ParseToken</span><span class="token punctuation">(</span>tokenStr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>model<span class="token punctuation">.</span>Token<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN_SECRET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>tokenStr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>model<span class="token punctuation">.</span>Token<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> secret<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>model<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
			<span class="token keyword">return</span> claims<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户服务，登录操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ctl <span class="token operator">*</span>userService<span class="token punctuation">)</span> <span class="token function">Login</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>smodel<span class="token punctuation">.</span>Login<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> admin model<span class="token punctuation">.</span>User
	where <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;user_name&quot;</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span> <span class="token string">&quot;is_delete&quot;</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>UserIsDeletedNo<span class="token punctuation">}</span>
	err <span class="token operator">:=</span> ctl<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> where<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>admin<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> gorm<span class="token punctuation">.</span>ErrRecordNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 检查密码</span>
	<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> gorm<span class="token punctuation">.</span>ErrRecordNotFound<span class="token punctuation">)</span> <span class="token operator">||</span> admin<span class="token punctuation">.</span>Password <span class="token operator">!=</span> encodeUtil<span class="token punctuation">.</span><span class="token function">EncryptionPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> admin<span class="token punctuation">.</span>Salt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> bizerr<span class="token punctuation">.</span>UserNamePasswordErr
	<span class="token punctuation">}</span>

	<span class="token comment">// 获取登录token</span>
	token<span class="token punctuation">,</span> expireAt<span class="token punctuation">,</span> err <span class="token operator">:=</span> Jwt<span class="token punctuation">.</span><span class="token function">GenerateAdminToken</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> admin<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> admin<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Hour<span class="token operator">*</span>viper<span class="token punctuation">.</span><span class="token function">GetDuration</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN_EXPIRE_HOUR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;获取登录token失败&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>smodel<span class="token punctuation">.</span>Login<span class="token punctuation">{</span>Token<span class="token punctuation">:</span> token<span class="token punctuation">,</span> ExpireAt<span class="token punctuation">:</span> expireAt<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>参考文章：https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</p>`,45),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index.html.vue"]]);export{r as default};
